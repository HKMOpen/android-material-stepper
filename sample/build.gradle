apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply from: "$rootDir.path/config/project_properties.gradle"
apply from: '../sample/code_coverage.gradle'

android {
    compileSdkVersion project.ANDROID_BUILD_SDK_VERSION as int
    buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION

    defaultConfig {
        applicationId "com.stepstone.stepper.sample"
        minSdkVersion project.ANDROID_BUILD_MIN_SDK_VERSION
        targetSdkVersion project.ANDROID_BUILD_TARGET_SDK_VERSION
        versionCode 1
        versionName "1.0"

        vectorDrawables.useSupportLibrary = true

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            testCoverageEnabled true
        }
    }

    testOptions {
        execution 'ANDROID_TEST_ORCHESTRATOR'
    }

   adbOptions {
        installOptions getAdbInstallOptions()
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:${KOTLIN}"

    implementation project(':material-stepper')
    implementation libden.appCompat
    implementation libden.recycler
    implementation libden.design

    implementation "com.jakewharton:butterknife:${BUTTERKNIFE}"
    kapt "com.jakewharton:butterknife-compiler:${BUTTERKNIFE}"

    implementation "uk.co.chrisjenx:calligraphy:${CALLIGRAPHY}"

    androidTestImplementation "com.android.support.test:runner:${ANDROID_SUPPORT_TEST}"
    androidTestImplementation "com.android.support.test:rules:${ANDROID_SUPPORT_TEST}"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:${ANDROID_ESPRESSO}"
    androidTestImplementation "com.android.support.test.espresso:espresso-intents:${ANDROID_ESPRESSO}"
    androidTestImplementation "com.android.support.test.espresso:espresso-contrib:${ANDROID_ESPRESSO}"
    androidTestUtil "com.android.support.test:orchestrator:${ANDROID_SUPPORT_TEST}"
    androidTestImplementation(libden.annotation) {
        force = true
    }
    androidTestImplementation(libden.support_v4) {
        force = true
    }
    androidTestImplementation(libden.appCompat) {
        force = true
    }
}

def instrumentationTestTaskName = 'connectedCheck'

apply from: '../sample/screenshots.gradle'

tasks[instrumentationTestTaskName].finalizedBy {
    [fetchScreenshotsTask, generateScreenshotReportTask]
}

def findTaskInLib(String taskName) {
    return rootProject.childProjects['material-stepper'].getTasksByName(taskName, false).first()
}

task('checkWithUiTests', dependsOn: [generateScreenshotReportTask, findTaskInLib('testDebugUnitTest'), findTaskInLib('lintDebug'), tasks['mergedJacocoTestReport'], findTaskInLib('pmd'), findTaskInLib('findbugs'), findTaskInLib('checkstyle')]) {
    group = "Verification"
    description = "Runs unit and UI tests with code coverage and makes code analysis."
}
