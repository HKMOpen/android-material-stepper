apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'bintray-release'
apply plugin: 'maven'
apply from: '../material-stepper/code_coverage.gradle'
apply from: '../config/quality/quality.gradle'


android {
    compileSdkVersion project.ANDROID_BUILD_SDK_VERSION as int
    buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION

    defaultConfig {
        minSdkVersion project.ANDROID_BUILD_MIN_SDK_VERSION
        targetSdkVersion project.ANDROID_BUILD_TARGET_SDK_VERSION
        vectorDrawables.useSupportLibrary = true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }
    //workaround so that code coverage is working with Robolectric: http://stackoverflow.com/a/35769943/973379
    //fixes https://github.com/robolectric/robolectric/issues/3169#issuecomment-312046322

/*
    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
        unitTests.includeAndroidResources = true
    }
*/


    lintOptions {
        warningsAsErrors true
        disable 'RequiredSize', 'ClickableViewAccessibility'
    }
}

dependencies {
    compile libden.appCompat

    testCompile "junit:junit:${J_UNIT}"
    testCompile "org.mockito:mockito-core:${KOTLIN_MOCK}"
    testCompile "com.squareup.assertj:assertj-android:${ACCERT_J}"
    testCompile("org.robolectric:robolectric:${ROBOLECTRIC}") {
        exclude group: 'commons-logging', module: 'commons-logging'
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    }
    testCompile "org.jetbrains.kotlin:kotlin-stdlib-jre7:${KOTLIN}"
    testCompile "org.jetbrains.kotlin:kotlin-reflect:${KOTLIN}"
    testCompile "com.nhaarman:mockito-kotlin:${KOTLIN_MOCK}"
}

// Log out test results to console

/*
gradle.taskGraph.beforeTask { Task task ->
    if (task instanceof Javadoc) {
        def releaseVariant = android.libraryVariants.find { it.buildType.name == 'release' }
        Javadoc javadocTask = (Javadoc) task
        javadocTask.source = android.sourceSets.main.java.srcDirs
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        javadocTask.classpath = files(releaseVariant.javaCompile.classpath.files) + files(ext.androidJar)
    }
}

tasks.matching { it instanceof Test}.all {
    testLogging.events = ["failed", "passed", "skipped"]
}*/


task ('checkWithCoverage') {
    dependsOn 'checkstyle', 'findbugs', 'pmd', 'jacocoTestReport', 'lintDebug'
}

apply from: 'bintrayrelease.gradle'
//install.mustRunAfter check